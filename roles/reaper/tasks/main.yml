---
- name: [REAPER] - Installation des paquets..
  apt:
      name={{ item }}
  with_items:
    - gcc
    - git
    - mysql-server
    - python-dev
    - libffi-dev
    - apt-transport-https
    - ca-certificates
    - debootstrap
    - python-requests
    - libssl-dev
    - curl
    - gnupg2
    - software-properties-common



- name: [REAPER] Installation de PIP ...
  get_url:
      url=https://bootstrap.pypa.io/get-pip.py
      dest=/opt/get-pip.py

- name: [REAPER] [PIP] - Démarrage Installation.
  shell: python get-pip.py
      chdir=/opt/
  when: pipinstall.stdout == ""

- name: [REAPER] [PIP] - Installation d'Ansible.
  pip:
    name=ansible
    state=latest

- name: [REAPER] [ANSIBLE] - Création répertoire ansible.
  file:
    dest=/opt/projetgl/reaper
    state=directory

- name: [REAPER] [ANSIBLE] - Envoi des rôles Ansible.
  synchronize:
    src=./{{ item }}
    dest=/opt/projetgl/reaper
  with_items:
    - roles
    - group_vars
  register: playbooks

- name: [REAPER] [ANSIBLE] - Ajout de l'inventaire Ansible.
  template:
      src=hosts.j2
      dest=/opt/projetgl/reaper/hosts

- name: [REAPER] [ANSIBLE] - Ajout des playbooks.
  template:
    src=site.yml.j2
    dest=/opt/projetgl/reaper/site.yml
  register: mainsite

#Docker-py :
# A Python library for the Docker Engine API.
# It lets you do anything the docker command does, but from within Python apps – run containers, manage containers, manage Swarms, etc.

- name: [REAPER] [DOCKER] [PIP] - Installation de docker-py.
  pip:
      name=docker-py
      state=latest

- name: [REAPER] [DOCKER]- Adding docker.io PGP key.
  shell: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

- name: [REAPER] [DOCKER]- Adding docker.io APT list.
  apt_repository:
    repo='deb https://download.docker.com/linux/debian jessie stable''
    state=present

# - name: [REAPER] [DOCKER]- Creating loopback devices.
#   shell: mknod -m0660 /dev/loop{{ item }} b 7 {{ item }}
#     executable=/bin/bash
#     creates=/dev/loop{{ item }}
#   with_sequence: start=0 end=7

#Installation du packet docker-ce (COMMUNITY EDITITION) avec apt update.

- name: [REAPER] [DOCKER]- Installation paquets.
  apt:
    name=docker-ce
    update_cache=yes

- name: [REAPER] [DOCKER] => CONSTRUCTION - Téléchargement docker-utils depuis GitHub.
  git:
    repo=https://github.com/docker/docker.git
    dest=/opt/docker-git

- name: [REAPER] [DOCKER] => CONSTRUCTION  -  Vérification des images docker.

  shell: docker images
  register: isimgpresent
  changed_when: false

#Création de l'image docker debian jessie si celle ci n'est pas déja présente dans la liste des images.
- name: [REAPER] [DOCKER] => CONSTRUCTION - Création d'une image debian jessie.
  shell: /opt/docker-git/contrib/mkimage.sh -t projetgl/jessie-mini debootstrap --variant=minbase --include=locales jessie
  when: "'projetgl/jessie-mini' not in isimgpresent.stdout"

- name: [REAPER] [DOCKER] => CONSTRUCTION - Création du répertoire de l'image.
  file:
    dest=/opt/projetgl/
    state=directory

- name: [REAPER] [DOCKER] => CONSTRUCTION - Envoie de la template Dockerfile.
  template:
    src=Dockerfile.j2
    dest=/opt/projetgl/Dockerfile
  register: dockerfile

- name: [REAPER] [DOCKER] => CONSTRUCTION - Création de l'image de base.
shell: docker build -t projetgl/jessie-base .
    chdir=/opt/projetgl/
  when: "{{ playbooks.changed or mainsite.changed or dockerfile.changed }}"
  register: buildbase

- name: [REAPER] [DOCKER] [RUN] - Arret des containers (modif de la conf)..
  docker:
    image: projetgl/jessie-base
    name: projet{{ item.target }}
    state: stopped
  with_items: "{{ ripper.containers }}"
  when: buildbase.changed

- name: [REAPER] [DOCKER] [RUN] - Démarrage des containers..
  docker:
    name: projet{{ item.target }}
    image: projetgl/jessie-base
    state: started
    tty: yes
    ports:
      - "{{ item.ports }}"
    env:
      TARGET: "{{ item.target }}"
  with_items: "{{ ripper.containers }}"


- name: [REAPER] [DOCKER] [ANSIBLE] - Ajotu des nouveaux containers dans l'inventaire Ansible.
  add_host:
    name=projet{{ item.target }}
    groups=docker
    ansible_connection=docker
  changed_when: false
  with_items: "{{ ripper.containers }}"

- name: [REAPER] [DOCKER] [RUN] - Waiting the end of deployment.
  wait_for:
    port="{{ item.ports.split(':') | first }}"
    delay=1
    timeout=3600
    host="{{ ripper.host }}"
  with_items: "{{ ripper.containers }}"
'''
- name: [REAPER] [DOCKER] [RUN] - Commit du containeur docker.
  shell: docker commit -a "Benjamin CALVET et Jonathan BENHAMEL"  ripper{{ item.target }} projetgl/{{ item.target}}
  with_items: "{{ ripper.containers }}"

- name: [REAPER] - FIN.
  debug:
    msg="Reaper has done his job !"
